#The following code has been sourced from https://machinelearningmastery.com/grid-search-hyperparameters-deep-learning-models-python-keras/.
# Use scikit-learn to grid search the batch size and epochs
import numpy as np
import tensorflow as tf
from sklearn.model_selection import GridSearchCV
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from scikeras.wrappers import KerasClassifier
# Function to create model, required for KerasClassifier
def create_model():
 # create model
 model = Sequential()
 model.add(Dense(12, input_shape=(11,), activation='relu'))
 model.add(Dense(8, activation='relu'))
 model.add(Dense(1))
 # Compile model
 model.compile(loss='mean_squared_error', optimizer='adam')
 return model
# fix random seed for reproducibility
seed = 42
tf.random.set_seed(seed)
#split dataset in features and target variable
feature_cols = ['Age', 'Experience', 'Credit Score', 'Family', 'Mortgage', 'Education_encoded', 'Personal_Loan_encoded', 'Securities_Account_encoded', 'CD_Account_encoded', 'Online_Banking_encoded', 'Credit_Card_encoded']
X = df2[feature_cols] # Features
y = df2.Income # Target variable
# create model
model = KerasClassifier(model=create_model, verbose=0)
# define the grid search parameters
batch_size = [10, 20, 40, 60, 80, 100]
epochs = [10, 50, 100]
param_grid = dict(batch_size=batch_size, epochs=epochs)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid_result = grid.fit(X, Y)
# summarize results
print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))
